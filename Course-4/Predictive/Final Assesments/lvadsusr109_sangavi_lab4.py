# -*- coding: utf-8 -*-
"""LVADSUSR109_Sangavi_Lab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Cv1d-tuOqCIftT64g1OdZzMLgKFW0_B
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import StratifiedKFold, cross_val_score,LeaveOneOut
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import confusion_matrix , classification_report,mean_squared_error,r2_score,accuracy_score,precision_score,recall_score,f1_score
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import LeavePOut, cross_val_score
from sklearn.model_selection import ShuffleSplit, cross_val_score
import warnings

df=pd.read_csv("/content/drive/MyDrive/Predictive/Final/social_network.csv")

print(df.head())

#EDA
df.info()
df.describe()

# check for missing values
print(df.isnull().sum())
print(df.duplicated().sum()) # No duplicate records
print(df.shape)

encoder=LabelEncoder()
df['account_status']=encoder.fit_transform(df['account_status'])

# Outlier detection
upper_limit = df.social_connections.mean() + 3*df.social_connections.std() ## Formula, CALC the upper limit of the Height
lower_limit = df.social_connections.mean() -3*df.social_connections.std() ## Formula, CALC the lower limit of the Height
df[(df.social_connections>upper_limit) | (df.social_connections<lower_limit)] ## "| = OR" Condition Adding Upper Limit and Lower Limit together to the DF
df_no_outlier_std_dev = df[(df.social_connections<upper_limit) & (df.social_connections>lower_limit)] ## Limit the height only to the upper and lower limits
print(df_no_outlier_std_dev.shape)

'''
Anomaly Detection
'''
# Select the features to be used for anomaly detection
features = ["account_status","login_activity", "posting_activity", "social_connections"]

# Create a new dataframe with the selected features
X = df[features]
model = IsolationForest(n_estimators=100, contamination=0.1,max_features = 3, max_samples=10000, random_state=42)
#model = IsolationForest()
model.fit(X)
y_pred = model.predict(X)
df["anomaly_score"] = model.decision_function(X)
anomalies = df.loc[df["anomaly_score"] < 0]

x=df[["account_status","login_activity", "posting_activity", "social_connections"]]
df_values=x.values

find=df_values

result=[]
for i in find:
  z=model.predict([i])
  if z==[1]:
    result.append('Not Anomaly')
  elif z==[-1]:
    result.append('Anomaly')

df['Anomaly']=result
print(df)
plt.scatter(df["social_connections"], df["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["social_connections"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Social Connections")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

'''
From the plot we can see that certain accounts are marked as anomaly with respect to the features.
They have suspicious activity
'''