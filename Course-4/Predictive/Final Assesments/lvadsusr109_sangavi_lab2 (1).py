# -*- coding: utf-8 -*-
"""LVADSUSR109_Sangavi_Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18bH_ms4Nyvq-hhByV0hqwA2XmIuDgDPM
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import StratifiedKFold, cross_val_score,LeaveOneOut
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import confusion_matrix , classification_report,mean_squared_error,r2_score,mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import LeavePOut, cross_val_score
from sklearn.model_selection import ShuffleSplit, cross_val_score

df=pd.read_csv("/content/drive/MyDrive/Predictive/Final/auto-mpg.csv")

print(df.head())

#EDA
df.info()
df.describe()

# check for missing values
print(df.isnull().sum())

df['displacement']=df['displacement'].fillna(method="ffill")
df['horsepower']=df['horsepower'].fillna(method="ffill")
df['acceleration']=df['acceleration'].fillna(method="bfill")
# Check for null after filling the missing value

print(df.isnull().sum())

sns.heatmap(df.corr(),annot=True)

print(df['horsepower'])

# Check for duplicate records
print(df.duplicated().sum()) # No duplicate records
# No categorical value for encoding
df['horsepower'] = df['horsepower'].astype('float32')
df=df.dropna()
#df['horsepower'] = df['horsepower'].replace('?', np.nan)

'''
Regression
'''
X=df.drop(columns=['model year','car name','origin','mpg'])
y=df['mpg']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)

y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)
train_rmse = mean_squared_error(y_train, y_pred_train, squared=False)
test_rmse = mean_squared_error(y_test, y_pred_test, squared=False)
r2_train = r2_score(y_train, y_pred_train)
r2_test = r2_score(y_test, y_pred_test)
train_MAE = mean_absolute_error(y_train, y_pred_train)
test_MAE = mean_absolute_error(y_test, y_pred_test)

print("Train RMSE:", train_rmse)
print("Test RMSE:", test_rmse)

print("Train R^2:", r2_train)
print("Test R^2:", r2_test)

print("Train MAE:", train_MAE)
print("Test MAE:", test_MAE)

