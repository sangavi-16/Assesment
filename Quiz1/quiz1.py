# -*- coding: utf-8 -*-
"""Quiz1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14R4V7ddyxYAsnoR0wj4kbrMzKjK9JuHb
"""

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier
df=pd.read_csv("/content/drive/MyDrive/ML\/DSAI-LVA-DATASET for Quiz.csv")
print(df)
# Checking for the min and max mark for pass category = Yes
new_val=df[(df['Pass']=='Yes') & (df['PreviousTestScore']==df['PreviousTestScore'].max())]
pass_yes_df = df[df['Pass'] == 'Yes']
min_prev_test_score = pass_yes_df['PreviousTestScore'].min()

print(min_prev_test_score)

def pass_criteria(PreviousTestScore):
    if PreviousTestScore >= 90 and PreviousTestScore <= 100:
        return "Pass With High Grade"
    elif PreviousTestScore >=56  and PreviousTestScore <= 89:
        return "Pass With Low Grade"
    else:
        return "Fail"
df['Pass'] = df['PreviousTestScore'].apply(pass_criteria)

options = ['Masters', 'Bachelors', 'High School', 'School', 'Not Educated']
np.random.seed(42)

while True:
    df['ParentEducation'] = np.random.choice(options, size=len(df))
    if set(options).issubset(df['ParentEducation']):
        break

# Display the DataFrame
print(df)

# Check if all options are present in the DataFrame
all_options_present = set(options).issubset(df['ParentEducation'])
print("All options present in DataFrame:", all_options_present)

print(df.head())

df.info()

df.describe()

print(df.isnull().sum())
df=df.drop_duplicates()
print(df.duplicated().sum())

encoder=LabelEncoder()
df['Pass']=encoder.fit_transform(df['Pass'])
print(df['Pass'])
df['ParentEducation']=encoder.fit_transform(df['ParentEducation'])

train_ratio = 0.7
test_ratio = 1 - train_ratio
train_size = int(len(df) * train_ratio)
test_size = len(df) - train_size
train_data = df[:train_size]
test_data = df[train_size:]
test_data=df

train_data.to_csv('train_data.csv', index=False)
test_data.to_csv('test_data.csv', index=False)

train_data=pd.read_csv("/content/test_data.csv")
test_date=pd.read_csv("/content/train_data.csv")

corr=train_data.corr()
sns.heatmap(corr,annot=True)

X_train = train_data.drop(columns=['Pass'])
Y_train = train_data['Pass']
X_test = test_data.drop(columns=['Pass'])
Y_test = test_data['Pass']

app_lis=[]
def printing(Y_test,rf_predictions):
  accuracy = accuracy_score(Y_test, rf_predictions)
  precision = precision_score(Y_test, rf_predictions, average='weighted')
  recall = recall_score(Y_test, rf_predictions, average='weighted')
  f1 = f1_score(Y_test, rf_predictions, average='weighted')
  conf_matrix = confusion_matrix(Y_test, rf_predictions)
  app_lis.append(accuracy)

  print("Accuracy:", accuracy)
  print("Precision:", precision)
  print("Recall:", recall)
  print("F1 Score:", f1)
  print("Confusion Matrix:\n", conf_matrix)
  print(app_lis)

rf_classifier = RandomForestClassifier(random_state=42)
rf_classifier.fit(X_train,Y_train)
rf_predictions = rf_classifier.predict(X_test)
rf_accuracy = accuracy_score(Y_test, rf_predictions)
Val=printing(Y_test,rf_predictions)

rf_classifier = KNeighborsClassifier(n_neighbors=3)
rf_classifier.fit(X_train,Y_train)
rf_predictions = rf_classifier.predict(X_test)
LR_accuracy = accuracy_score(Y_test, rf_predictions)
Val=printing(Y_test,rf_predictions)

rf_classifier = XGBClassifier()
rf_classifier.fit(X_train,Y_train)
rf_predictions = rf_classifier.predict(X_test)
LR_accuracy = accuracy_score(Y_test, rf_predictions)
Val=printing(Y_test,rf_predictions)

import matplotlib.pyplot as plt
sns.barplot(app_lis)
plt.ylabel('Accuracy')
plt.xlabel(['RF','KNN','XGB'])
plt.show()